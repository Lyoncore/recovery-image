#!/usr/bin/python3

import sys, getopt
import yaml
from systemd import journal

def usage():
    print('subiquity-msgsender -c <curtin_conf_yaml> -m <message to send> -e <start | finish>')

def find_identifier(curtin_conf):
    curtin_yaml = yaml.load(open(curtin_conf).read())
    for k, v in curtin_yaml.items():
        if k == 'reporting':
            return v['subiquity']['identifier']
    return None


def msg_send(identifier, msg, event_type):
    success = ''
    extra = {}
    #extra['CURTIN_RESULT'] = "darren test"
    if event_type == 'start':
        success = ''
    elif event_type == 'finish':
        success = 'SUCCESS: '

    event = event_type + ": cmd-recovery/stage-confirm:" + success + "User confirmation to restore system"
    print("send event:", event, "identifier:", identifier, "msg:", msg)

    journal.send(
        event,
        PRIORITY=7,
        SYSLOG_IDENTIFIER=identifier,
        CURTIN_EVENT_TYPE=event_type,
        CURTIN_MESSAGE=msg,
        CURTIN_NAME='cmd-recovery',
        **extra
        )

    #start: cmd-install/stage-late: executing late commands

def main(argv):
    curtin_conf = ''
    msg = ''
    event_type = ''
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hc:m:e:")
    except getopt.GetoptError as err:
        usage()
        sys.exit(2)

    for o, a in opts:
        if o == "-h":
            usage()
            sys.exit()
        elif o in ("-c"):
            curtin_conf = a
        elif o in ("-m"):
            msg = a
        elif o in ("-e"):
            event_type = a

    if curtin_conf is '' or msg is '':
        print('curtin_conf or msg is None')
        usage()
        sys.exit(2)
    
    if event_type != 'start' and event_type != 'finish':
        print('invalid event_type:', event_type)
        usage()
        sys.exit(2)

    identifier = find_identifier(curtin_conf)
    if identifier is not None:
        msg_send(identifier, msg, event_type)
    else:
        raise AssertionError

if __name__ == "__main__":
   main(sys.argv[1:])

