#!/usr/bin/env python3
import sys
import os
import getopt
import yaml
from shutil import copyfile

curtin_yaml = {}
recovery_yaml = {}
def usage():
    print('curtin-cfe -c <curtin_conf_yaml> -r <recovery_config_yaml>')

def find_mountdevice(path):
    for l in open("/proc/mounts", "r"):
        mp = l.split(" ")[1]
        dev = l.split(" ")[0]
        if(mp != "/" and path.find(mp)==0): return dev[:-1] 
    return None

def process_curtin_yaml(curtin_yaml, recovery_yaml):
    swapexist = False
    # read recovery config.yaml to get the parittions size
    for k, v in recovery_yaml.items():
        if k == 'configs':
            swap = v['swap']
            swapsize = v['swapsize']
            bootsize = v['bootsize']
            rootfssize = v['rootfssize']
        elif k == 'recovery':
            recoverysize = v['recoverysize']

    # remove old storage parts
    for k, v in curtin_yaml.items():
        if k == 'storage':
            print("origin storage:", yaml.dump(v))
            for val in v['config']:
                if val['type'] == 'disk':
                    devpath = val['path']

            devpath = find_mountdevice('/cdrom')
            # since we know the system disk now, we need to know the disk size
            sysfs_disk_blocks = '/sys/block/' + os.path.basename(devpath) + '/size'
            BLOCK_SIZE_BYTES = 512
            blocks = int(open(sysfs_disk_blocks.format(**locals())).read())
            disksize = blocks * BLOCK_SIZE_BYTES

            # calculate the rootfs partitions size
            if rootfssize <= 0:
                if swap is True and swapsize >= 0:
                    swapexist = True
                    realrootsize = disksize - bootsize - swapsize
                else:
                    realrootsize = disksize - bootsize
            else:
                realrootsize = rootfssize

            v.pop('config', None)
            v['config'] = [{'id': 'disk-0', 'type': 'disk', 'ptable': 'gpt', 'path': devpath, 'grub_device': True, 'preserve': True},
                    {'id': 'part-0', 'type': 'partition', 'number': 1, 'device': 'disk-0', 'size': recoverysize, 'preserve': True},
                    {'id': 'part-1', 'type': 'partition', 'number': 2, 'device': 'disk-0', 'size': bootsize,'flag': 'boot', 'preserve': True}]
            if swapexist is True:
                v['config'].append({'id': 'part-2', 'type': 'partition', 'number': 3, 'device': 'disk-0', 'size': swapsize, 'preserve': True})
                v['config'].append({'id': 'part-3', 'type': 'partition', 'number': 4, 'device': 'disk-0', 'size': realrootsize, 'preserve': True})
                v['config'].append({'id': 'fs-0', 'type': 'format', 'fstype': 'fat32', 'volume': 'part-1', 'preserve': True})
                v['config'].append({'id': 'fs-1', 'type': 'format', 'fstype': 'ext4', 'volume': 'part-3', 'preserve': True})
            else:
                v['config'].append({'id': 'part-2', 'type': 'partition', 'number': 3, 'device': 'disk-0', 'size': realrootsize, 'preserve': True})
                v['config'].append({'id': 'fs-0', 'type': 'format', 'fstype': 'fat32', 'volume': 'part-1', 'preserve': True})
                v['config'].append({'id': 'fs-1', 'type': 'format', 'fstype': 'ext4', 'volume': 'part-2', 'preserve': True})

            v['config'].append({'id': 'mount-1', 'type': 'mount', 'device': 'fs-1', 'path': '/', 'preserve': True})
            v['config'].append({'id': 'mount-0', 'type': 'mount', 'device': 'fs-0', 'path': '/boot/efi', 'preserve': True})
            print("new storage:", yaml.dump(v))

    # add post-hook for recovery process
    curtin_yaml['late_commands'] = {'recovery_post': '/cdrom/recovery/bin/recovery_post.sh'}
    print(yaml.dump(curtin_yaml))

def main():
    curtin_conf = ''
    recovery_conf = ''

    try:
        opts, args = getopt.getopt(sys.argv[1:], "hc:r:")
    except getopt.GetoptError as err:
        usage()
        sys.exit(2)

    for o, a in opts:
        if o == "-h":
            usage()
            sys.exit()
        elif o in ("-c"):
            curtin_conf = a 
        elif o in ("-r"):
            recovery_conf = a 
    
    if curtin_conf is '' or recovery_conf is '':
        usage()
        sys.exit(2)

    curtin_yaml = yaml.load(open(curtin_conf).read())
    recovery_yaml = yaml.load(open(recovery_conf).read())

    process_curtin_yaml(curtin_yaml, recovery_yaml)

    backup_curtin = curtin_conf + '.org'
    copyfile(curtin_conf, backup_curtin)
    with open(curtin_conf, 'w') as f:
        f.write(yaml.dump(curtin_yaml))


if __name__ == '__main__':
    sys.exit(main())
